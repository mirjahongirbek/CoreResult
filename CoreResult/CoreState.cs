using CoreClient;
using CoreClient.Models;
using CoreResult;
using CoreResult.Models.Sms;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using RestSharp;
using Swashbuckle.AspNetCore.Filters;
using Swashbuckle.AspNetCore.Swagger;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;

namespace CoreResults
{
    public static class CoreState
    {
        public static Rest Rest { get; set; }
        public static string AddFile(string path, IFormFile file)
        {

            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "myimages", path);
            var filename = RepositoryCore.CoreState.RepositoryState.GenerateRandomString(6) + file.FileName;
            byte[] fileData = null;
            using (var reader = new BinaryReader(file.OpenReadStream()))
            {
                fileData = reader.ReadBytes((int)file.Length);

            }
            filePath = Path.Combine(filePath, filename);
            File.WriteAllBytes(filePath, fileData);
            return filename;

        }
       
        public static void SwaggerService(IServiceCollection services)
        {
            services.AddSwaggerDocument();
            services.AddSwaggerExamples();
            services.ConfigureSwaggerGen(options => { options.CustomSchemaIds(m => m.FullName); });
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Info
                {
                    Title = "Swagger XML Api Demo",
                    Version = "v1",
                    Description = "A simple \"Personnel department\" ASP.NET Core Web API",
                    TermsOfService = "None",
                    Contact = new Contact { Name = "Uzcard Team", Email = "", Url = "https://qrpay.uz" } //,
                    //License = new License { Name = "Use under LICX", Url = "https://qrpay.uz" }
                });

                c.AddSecurityDefinition("Bearer", new ApiKeyScheme
                {
                    Description =
                        "Заголовок авторизации JWT с использованием схемы Bearer. Пример: \"Authorization: Bearer { token }\"",
                    Name = "Authorization",
                    In = "header",
                    Type = "apiKey"
                });
                c.AddSecurityRequirement(new Dictionary<string, IEnumerable<string>>
                {
                    {"Bearer", new string[] { }}
                });

                c.ExampleFilters();

#pragma warning disable CS0618 // Type or member is obsolete
                c.OperationFilter<AddFileParamTypesOperationFilter
                >(); // Adds an Upload button to endpoints which have [AddSwaggerFileUploadButton]
#pragma warning restore CS0618 // Type or member is obsolete
                //c.OperationFilter<AddHeaderOperationFilter>("correlationId", "Correlation Id for the request", false); // adds any string you like to the request headers - in this case, a correlation id
                c.OperationFilter<AddResponseHeadersFilter>(); // [SwaggerResponseHeader]
                c.OperationFilter<SecurityRequirementsOperationFilter>(); // [SwaggerResponseHeader]
                //Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //... and tell Swagger to use those XML comments.
               // c.IncludeXmlComments(xmlPath);
            });
        }
        public static void AddContextWithSwagger(this IServiceCollection services,
            string url = "",
            string projectName = "",
            string login = "",
            string password = "",
            double UpdateSec = 600)
        {
            AddContextAccessor(services, url, projectName, login, password, UpdateSec);
            SwaggerService(services);

        }
        public static void AddContextAccessor(IServiceCollection services,
            string url="",
            string projectName="", 
            string login="" ,
            string password="",
            double UpdateSec=600)
        {
            services.AddHttpContextAccessor();
            if(!string.IsNullOrEmpty(url))
            Rest.Instanse(url, projectName,services, UpdateSec, login, password);
        }
       /* public static bool SendSms(string phoneNumber, string Text, string orginator="3700")
        {
            var postData = ""; // + richTextBox2.Text;
            var result = "";
            var r = DateTime.Now.ToFileTime();
            var m = new RootObject();
            m.messages = new List<Message>();
            var mes = new Message();
            mes.message_id = "qpy" + r.ToString().Substring(0, 12);
            mes.priority = "";
            mes.recipient = phoneNumber;
            mes.sms = new SmsModel{ content = new Content { text =  Text}, originator = orginator, };
            m.messages.Add(mes);

            postData = JsonConvert.SerializeObject(m);

            var data = Encoding.GetEncoding("UTF-8").GetBytes(postData);
            var client = new RestClient(SmsUrl);
            var req = new RestRequest(Method.POST);
            var unEncodedString = string.Format("{0}:{1}", RestState.ProjectConfig.ToString("SmsLogin"), RestState.ProjectConfig.ToString("SmsPassword"));
            req.AddHeader("cache-control", "no-cache");
            req.AddParameter("application/json; charset=utf-8", data, ParameterType.RequestBody);
            req.AddHeader("Authorization", "Basic " + Convert.ToBase64String(Encoding.ASCII.GetBytes(unEncodedString)));
            req.AddJsonBody(data);
            try
            {
                var jsonResponseData = client.Execute(req);
                if (jsonResponseData.StatusCode == HttpStatusCode.OK && result.ToLower()== "request is received") return true;
                return false;
            }
            catch (FormatException ex)
            {
                return false;
            }

        }*/
        public static MyModel ById(int id)
        {
            var result = Rest.GetById(id, CoreClient.Models.ModelStatus.IntStatus);
            return result;
        }
        public static void ContextMiddleware(IApplicationBuilder app)
        {
           var accses= app.ApplicationServices.GetService<IHttpContextAccessor>();
            if (app.ApplicationServices.GetService<IHttpContextAccessor>() != null)
                HttpContextHelper.Accessor = app.ApplicationServices.GetRequiredService<IHttpContextAccessor>();
        }
        public static void ContextWithSwagger(this IApplicationBuilder app)
        {
            ContextMiddleware(app);
            SwaggerBuilderExtensions.UseSwagger(app);
            app.UseSwaggerUi3();
           
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "IVR API v1");
                c.RoutePrefix = "swagger/ui";
            });
        }
    }





}
